upstream backend {
    server backend:8000;
}

upstream frontend {
    server frontend:5173;
}



server {
    listen 443 ssl;
    
    ssl_certificate /etc/ssl/certs/transandence.crt;
    ssl_certificate_key /etc/ssl/private/transandence.key;
    ssl_protocols TLSv1.2 TLSv1.3;


    location /media/ {
        alias /usr/share/nginx/media/;
        autoindex off;
        expires max;
        access_log off;
    }
    # Backend API
    location /api/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    # WebSocket connections
    location /ws/ {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    location /vite-hmr/ {
    proxy_pass http://frontend;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    }

   # Modify your frontend location block to handle Vite's WebSocket connections:
    location / {
            root /usr/share/nginx/html;
        index index.html;
        try_files $uri /index.html;
        
    proxy_pass http://frontend;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    # Add these for Vite HMR
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
}

# You might not need the separate /vite-hmr/ location since Vite's HMR 
# typically works through the root path

}

server {
    listen 80;
    return 301 https://$host$request_uri;
}