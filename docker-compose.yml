version: '3.8'

services:
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile.backend
    container_name: backend
    env_file:
      - .env
    volumes:
      - ./back:/app
      - media:/app/media
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      - db
    command: >
      /bin/sh -c "pip install --upgrade pip &&
      pip install -r /app/requirements.txt &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py runserver 0.0.0.0:8000"
    networks:
      - elk
    restart: always

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile.frontend
    container_name: frontend
    env_file:
      - .env
    volumes:
      - ./front:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - elk
    restart: always

  db:
    image: postgres:17
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - elk
    restart: always

  redis:
    image: redis:7
    container_name: redis
    env_file:
      - .env
    networks:
      - elk
    restart: always

  elasticsearch:
    build:
      context: ./elasticsearch
      args:
        ELASTIC_VERSION: 8.15.5
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=ayman
      - KIBANA_PASSWORD=ayman
    volumes:
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - elasticsearch-data:/usr/share/elasticsearch/data
      - elasticsearch-certs:/usr/share/elasticsearch/config/certs
    networks:
      - elk
    restart: always

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.5
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=ayman
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/certs/ca/ca.crt
    volumes:
      - ./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - elasticsearch-certs:/usr/share/kibana/config/certs
    depends_on:
      - elasticsearch
    networks:
      - elk
    restart: always

  logstash:
    build:
      context: ./logstash
      dockerfile: Dockerfile.logstash
    container_name: logstash
    environment:
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTIC_PASSWORD=ayman
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/logstash.yaml:/usr/share/logstash/config/logstash.yml
      - elasticsearch-certs:/usr/share/logstash/config/certs
    depends_on:
      - elasticsearch
    networks:
      - elk
    restart: always

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    volumes:
      - media:/usr/share/nginx/media
      - ./nginx/conf.d:/etc/nginx/conf.d  # Mount custom Nginx configuration
    networks:
      - elk
    restart: always

networks:
  elk:
    name: elk

volumes:
  pgdata:
    driver: local
  media:
    driver: local
  elasticsearch-data:
    driver: local
  elasticsearch-certs:
    driver: local