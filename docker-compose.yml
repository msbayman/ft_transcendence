version: "3.8"

services:
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile.backend
    container_name: backend
    env_file:
      - .env
    volumes:
      - ./back:/app
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://backend:${BACKEND_PORT}/user_auth/health_check",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    command:
      - /bin/sh
      - -c
      - |
        until pg_isready -h db -p 5432; do 
          echo 'Waiting for database...'
          sleep 5
        done
        echo 'Database is ready'
        pip install -r /app/requirements.txt
        
        # Run migrations one by one to ensure proper order
        python manage.py migrate auth
        python manage.py migrate contenttypes
        python manage.py migrate admin
        python manage.py migrate sessions
        python manage.py migrate django_apscheduler
        python manage.py migrate
        
        echo "Creating superuser with username: ${django_admin_username}, email: ${django_admin_mail}, password: ${django_admin_password}"
        echo "
        from django.contrib.auth import get_user_model;
        User = get_user_model();
        if not User.objects.filter(username='${django_admin_username}').exists():
            user = User.objects.create_superuser(
                username='${django_admin_username}',
                email='${django_admin_mail}',
                password='${django_admin_password}'
            )
            user.is_validate = True
            user.save()
        " | python manage.py shell
        
        python manage.py runserver 0.0.0.0:${BACKEND_PORT}
        

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile.frontend
    container_name: frontend
    volumes:
      - ./front:/app
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      backend:
        condition: service_healthy
    command:
      - /bin/sh
      - -c
      - |
        echo "Waiting for backend to be ready..."
        while ! curl -s http://backend:${BACKEND_PORT}/user_auth/health_check >/dev/null; do
          sleep 5
        done
        echo "Backend is ready. Starting frontend..."
        npm install && npm run dev

  db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ${PGDATA}:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    container_name: redis
    env_file:
      - .env
    ports:
      - "6380:6379"
    command: ["redis-server"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: elasticsearch
    env_file:
      - .env
    ports:
      - "${ELK_PORT}:${ELK_PORT}"
    environment:
      - discovery.type=single-node  # Add this line
      - xpack.security.enabled=false  # Disable security for development
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"  # Limit memory usage
    volumes:
      - ${elk_volume}:/usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      - elk
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.0
    container_name: kibana
    env_file:
      - .env
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT}"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:${ELK_PORT}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - elk
    restart: on-failure

  logstash:
    build:
      context: .
      dockerfile: logstash/Dockerfile.logstash
    container_name: logstash
    env_file:
      - .env
    ports:
      - "${LOGSTASH_PORT}:${LOGSTASH_PORT}"
    environment:
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    depends_on:
      - elasticsearch
    networks:
      - elk
    restart: on-failure
    volumes:
      - ./logstash:/usr/share/logstash/pipeline
      - ./back:/usr/share/logstash/back
    command: >
      logstash -f /usr/share/logstash/pipeline/logstash.conf

networks:
  elk:
    name: elk

volumes:
  pgdata:
    driver: local