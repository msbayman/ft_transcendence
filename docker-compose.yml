version: "3.8"

services:
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile.backend
    container_name: backend
    volumes:
      - ./back:/app
    ports:
      - "8000:8000"
    environment:
      - DB_NAME=postgres_db
      - DB_USER=postgres_user
      - DB_PASSWORD=postgres_password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_PORT=6380
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://backend:8000/user_auth/health_check"]
      interval: 10s
      timeout: 5s
      retries: 10
    command:
      - /bin/sh
      - -c
      - |
        until pg_isready -h db -p 5432; do 
          echo 'Waiting for database...'
          sleep 5
        done
        echo 'Database is ready'
        python3 -m venv /app/venv
        . /app/venv/bin/activate
        /app/venv/bin/pip install -r /app/requirements.txt
        /app/venv/bin/python manage.py migrate
        echo "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('admin', 'admin@example.com', 'admin') if not User.objects.filter(username='admin').exists() else None" | /app/venv/bin/python manage.py shell
        /app/venv/bin/python manage.py runserver 0.0.0.0:8000

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile.frontend
    container_name: frontend
    volumes:
      - ./front:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    depends_on:
      backend:
        condition: service_healthy
    command:
      - /bin/sh
      - -c
      - |
        echo "Waiting for backend to be ready..."
        while ! curl -s http://backend:8000/user_auth/health_check >/dev/null; do
          sleep 5
        done
        echo "Backend is ready. Starting frontend..."
        npm install && npm run dev

  db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_DB: postgres_db
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user -d postgres_db"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6380:6379"
    command: ["redis-server"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=ayman
    volumes:
      - ./elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    networks:
      - elk
    restart: on-failure

  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=ayman
    depends_on:
      - elasticsearch
    networks:
      - elk
    restart: on-failure

  logstash:
    build:
      context: .
      dockerfile: logstash/Dockerfile.logstash
    container_name: logstash
    ports:
      - "9600:9600"
    environment:
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=ayman
    depends_on:
      - elasticsearch
    networks:
      - elk
    restart: on-failure
    volumes:
      - ./logstash:/usr/share/logstash/pipeline
      - ./back:/usr/share/logstash/back
    command: >
      logstash -f /usr/share/logstash/pipeline/logstash.conf


networks:
  elk:
    name: elk

volumes:
  pgdata:
    driver: local
