version: "3.8"

services:
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile.backend
    container_name: backend
    env_file:
      - .env
    volumes:
      - ./back:/app
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      - db
    networks:
      - elk
    restart: always

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile.frontend
    container_name: frontend
    env_file:
      - .env
    volumes:
      - ./front:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - elk
    restart: always

  db:
    image: postgres:17
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - elk
    restart: always

  redis:
    image: redis:7
    container_name: redis
    env_file:
      - .env
    networks:
      - elk
    restart: always

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
  #   container_name: elasticsearch
  #   env_file:
  #     - .env
  #   ports:
  #     - "${ELK_PORT}:${ELK_PORT}"
  #   environment:
  #     - discovery.type=${discovery_type}
  #     - xpack.security.enabled=${xpack_security_enabled}
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #   volumes:
  #     - ${elk_volume}:/usr/share/elasticsearch/config/elasticsearch.yml
  #   networks:
  #     - elk
  #   restart: on-failure

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.15.0
  #   container_name: kibana
  #   env_file:
  #     - .env
  #   ports:
  #     - "${KIBANA_PORT}:${KIBANA_PORT}"
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:${ELK_PORT}
  #     - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
  #     - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - elk
  #   restart: on-failure

  # logstash:
  #   build:
  #     context: .
  #     dockerfile: logstash/Dockerfile.logstash
  #   container_name: logstash
  #   env_file:
  #     - .env
  #   ports:
  #     - "${LOGSTASH_PORT}:${LOGSTASH_PORT}"
  #   environment:
  #     - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
  #     - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - elk
  #   restart: on-failure
  #   volumes:
  #     - ./logstash:/usr/share/logstash/pipeline
  #     - ./back:/usr/share/logstash/back
  #   command: >
  #     logstash -f /usr/share/logstash/pipeline/logstash.conf

  nginx:
      build:
        context: ./nginx
        dockerfile: Dockerfile.nginx
      ports:
        - "80:80"
        - "443:443"
      depends_on:
        - frontend
        - backend
      networks:
        - elk
      restart: always

networks:
  elk:
    name: elk

volumes:
  pgdata:
    driver: local
